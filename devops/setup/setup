#!/usr/bin/env perl
use warnings;
use strict;
use File::Temp qw( tempfile ); # corelist - 5.6.1
use File::Find;                # corelist - 5 

# If the user gives no command, asks for help, or invokes this command incorrectly, 
# show usage and exit.
if ( ( not @ARGV ) or ( grep { /^(?:--)?help$/i } @ARGV ) or ( not scalar @ARGV == 3 ) ) {
    my $roles = join( "", map { "\t$_\n" } find_roles() );
    (my $usage = {get_data()}->{USAGE} ) =~ s|\[\% ROLES \%\]|$roles|g;
    print STDERR $usage;
    exit;
}

# Gather role, host and then create a playbook.
my ( $role, $host, $hostname ) = @ARGV;
(my $playbook = {get_data()}->{TEMPLATE} ) =~ s|\[\% ROLE \%\]|$role|g;

# Write the playbook to a temp file that will be deleted once this script is finished.
my ( $fh, $filename ) = tempfile( DIR => '.', SUFFIX => '.yml', UNLINK => 1 );
print $fh $playbook;
close $fh;

print "[$role] Running: ssh $host hostnamectl set-hostname $hostname\n";
system( 'ssh', '-l', 'root', '-oUserKnownHostsFile=/dev/null', '-oStrictHostKeyChecking=no', $host, # Connection
    'hostnamectl', 'set-hostname', $hostname                                                        # Command
);

# Tell the user what we're running, and then run it.
print "[$role] Running: ansible-playbook -i '$host,' $filename\n";
system( qw( ansible-playbook -i ), "$host,", $filename );

# == Data Stuff == # 
# Store file and usage in the __DATA__ section and load them
# into a hash based on -!- NAME -!- preceeding the file.  If
# there is content before an initial -!- NAME -!- the name will
# be DEFAULT.
sub get_data {
    my %data;
    my $section = 'DEFAULT';
    foreach my $line ( <DATA> ) {
        if ( $line =~ /^-!- ([A-Z]+) -!-$/ ) {
            $section = $1;
            next;
        }
        $data{$section} .= $line;
    }
    return %data;
};

# Return a list of the rules we know about.
sub find_roles {
    my @roles;

    find( sub { 
        return unless $File::Find::dir =~ tr[/][] == 0; # roles/* only
        return unless $_ ne '.';                        # No .
        push @roles, $_;
    }, 'roles' );

    return @roles;
}


__DATA__
-!- TEMPLATE -!-
---
- name: Setup a MarkdownSite server
  remote_user: root
  hosts: all
  vars:
    ansible_ssh_common_args: -oControlMaster=auto -oControlPersist=60s -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no
    config: "{{ lookup('file', 'config.yml' ) | from_yaml }}"

  roles:
    - [% ROLE %]

-!- USAGE -!-

This program does the initial setup of a given server as a server type.

Usage: ./setup <mds-setup-...> <host or ip for ssh connection> <hostname to set machine to>

Examples: 

    Setup the host 192.168.100.10 as a panel node, named panel.home.lan
    $ ./setup mds-setup-panel 192.168.100.10 panel.home.lan

    Setup the host insight.markdownsite.com as an insight node
    $ ./setup mds-setup-insight insight.markdownsite.com insight.markdownsite.com

    Setup the host myserver.hostingprovider.com as a build node named build-01.mydomain.com
    $ ./setup mds-setup-build myserver.hostingprovider.com build-01.mydomain.com

Server Types:

    [% ROLES %]

